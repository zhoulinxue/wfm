package com.zx.wfm.bean;

import java.util.List;
import com.zx.wfm.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.zx.wfm.dao.BaseUserDao;
import com.zx.wfm.dao.IDCardDao;
import com.zx.wfm.dao.MovieCourseDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "BASE_USER".
 */
public class BaseUser extends com.zx.wfm.bean.Basebean  implements java.io.Serializable {

    private String uid;
    private String sex;
    private Long age;
    private String headUrl;
    private String nickName;
    private String deviceId;
    private String userType;
    private Boolean isVip;
    private String rechargeTime;
    private Long cardId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BaseUserDao myDao;

    private IDCard iDCard;
    private Long iDCard__resolvedKey;

    private List<MovieCourse> movieCourseList;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BaseUser() {
    }

    public BaseUser(String uid) {
        this.uid = uid;
    }

    public BaseUser(String uid, String sex, Long age, String headUrl, String nickName, String deviceId, String userType, Boolean isVip, String rechargeTime, Long cardId) {
        this.uid = uid;
        this.sex = sex;
        this.age = age;
        this.headUrl = headUrl;
        this.nickName = nickName;
        this.deviceId = deviceId;
        this.userType = userType;
        this.isVip = isVip;
        this.rechargeTime = rechargeTime;
        this.cardId = cardId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBaseUserDao() : null;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    public String getSex() {
        return sex;
    }

    public void setSex(String sex) {
        this.sex = sex;
    }

    public Long getAge() {
        return age;
    }

    public void setAge(Long age) {
        this.age = age;
    }

    public String getHeadUrl() {
        return headUrl;
    }

    public void setHeadUrl(String headUrl) {
        this.headUrl = headUrl;
    }

    public String getNickName() {
        return nickName;
    }

    public void setNickName(String nickName) {
        this.nickName = nickName;
    }

    public String getDeviceId() {
        return deviceId;
    }

    public void setDeviceId(String deviceId) {
        this.deviceId = deviceId;
    }

    public String getUserType() {
        return userType;
    }

    public void setUserType(String userType) {
        this.userType = userType;
    }

    public Boolean getIsVip() {
        return isVip;
    }

    public void setIsVip(Boolean isVip) {
        this.isVip = isVip;
    }

    public String getRechargeTime() {
        return rechargeTime;
    }

    public void setRechargeTime(String rechargeTime) {
        this.rechargeTime = rechargeTime;
    }

    public Long getCardId() {
        return cardId;
    }

    public void setCardId(Long cardId) {
        this.cardId = cardId;
    }

    /** To-one relationship, resolved on first access. */
    public IDCard getIDCard() {
        Long __key = this.cardId;
        if (iDCard__resolvedKey == null || !iDCard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            IDCardDao targetDao = daoSession.getIDCardDao();
            IDCard iDCardNew = targetDao.load(__key);
            synchronized (this) {
                iDCard = iDCardNew;
            	iDCard__resolvedKey = __key;
            }
        }
        return iDCard;
    }

    public void setIDCard(IDCard iDCard) {
        synchronized (this) {
            this.iDCard = iDCard;
            cardId = iDCard == null ? null : iDCard.getCardId();
            iDCard__resolvedKey = cardId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<MovieCourse> getMovieCourseList() {
        if (movieCourseList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MovieCourseDao targetDao = daoSession.getMovieCourseDao();
            List<MovieCourse> movieCourseListNew = targetDao._queryBaseUser_MovieCourseList(uid);
            synchronized (this) {
                if(movieCourseList == null) {
                    movieCourseList = movieCourseListNew;
                }
            }
        }
        return movieCourseList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMovieCourseList() {
        movieCourseList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
