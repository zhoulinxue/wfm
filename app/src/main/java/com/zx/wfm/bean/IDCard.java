package com.zx.wfm.bean;

import com.zx.wfm.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.zx.wfm.dao.BaseUserDao;
import com.zx.wfm.dao.IDCardDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "IDCARD".
 */
public class IDCard extends com.zx.wfm.bean.Basebean  implements java.io.Serializable {

    private Long cardId;
    private Long validity;
    private String uid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient IDCardDao myDao;

    private BaseUser baseUser;
    private String baseUser__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public IDCard() {
    }

    public IDCard(Long cardId) {
        this.cardId = cardId;
    }

    public IDCard(Long cardId, Long validity, String uid) {
        this.cardId = cardId;
        this.validity = validity;
        this.uid = uid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getIDCardDao() : null;
    }

    public Long getCardId() {
        return cardId;
    }

    public void setCardId(Long cardId) {
        this.cardId = cardId;
    }

    public Long getValidity() {
        return validity;
    }

    public void setValidity(Long validity) {
        this.validity = validity;
    }

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    /** To-one relationship, resolved on first access. */
    public BaseUser getBaseUser() {
        String __key = this.uid;
        if (baseUser__resolvedKey == null || baseUser__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BaseUserDao targetDao = daoSession.getBaseUserDao();
            BaseUser baseUserNew = targetDao.load(__key);
            synchronized (this) {
                baseUser = baseUserNew;
            	baseUser__resolvedKey = __key;
            }
        }
        return baseUser;
    }

    public void setBaseUser(BaseUser baseUser) {
        synchronized (this) {
            this.baseUser = baseUser;
            uid = baseUser == null ? null : baseUser.getUid();
            baseUser__resolvedKey = uid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
