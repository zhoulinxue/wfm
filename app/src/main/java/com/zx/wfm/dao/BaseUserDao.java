package com.zx.wfm.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.zx.wfm.bean.IDCard;

import com.zx.wfm.bean.BaseUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_USER".
*/
public class BaseUserDao extends AbstractDao<BaseUser, String> {

    public static final String TABLENAME = "BASE_USER";

    /**
     * Properties of entity BaseUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Sex = new Property(1, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(2, Long.class, "age", false, "AGE");
        public final static Property HeadUrl = new Property(3, String.class, "headUrl", false, "HEAD_URL");
        public final static Property NickName = new Property(4, String.class, "nickName", false, "NICK_NAME");
        public final static Property DeviceId = new Property(5, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property UserType = new Property(6, String.class, "userType", false, "USER_TYPE");
        public final static Property IsVip = new Property(7, Boolean.class, "isVip", false, "IS_VIP");
        public final static Property RechargeTime = new Property(8, String.class, "rechargeTime", false, "RECHARGE_TIME");
        public final static Property CardId = new Property(9, Long.class, "cardId", false, "CARD_ID");
    };

    private DaoSession daoSession;


    public BaseUserDao(DaoConfig config) {
        super(config);
    }
    
    public BaseUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_USER\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"SEX\" TEXT," + // 1: sex
                "\"AGE\" INTEGER," + // 2: age
                "\"HEAD_URL\" TEXT," + // 3: headUrl
                "\"NICK_NAME\" TEXT," + // 4: nickName
                "\"DEVICE_ID\" TEXT," + // 5: deviceId
                "\"USER_TYPE\" TEXT," + // 6: userType
                "\"IS_VIP\" INTEGER," + // 7: isVip
                "\"RECHARGE_TIME\" TEXT," + // 8: rechargeTime
                "\"CARD_ID\" INTEGER);"); // 9: cardId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BaseUser entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(2, sex);
        }
 
        Long age = entity.getAge();
        if (age != null) {
            stmt.bindLong(3, age);
        }
 
        String headUrl = entity.getHeadUrl();
        if (headUrl != null) {
            stmt.bindString(4, headUrl);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(5, nickName);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(7, userType);
        }
 
        Boolean isVip = entity.getIsVip();
        if (isVip != null) {
            stmt.bindLong(8, isVip ? 1L: 0L);
        }
 
        String rechargeTime = entity.getRechargeTime();
        if (rechargeTime != null) {
            stmt.bindString(9, rechargeTime);
        }
 
        Long cardId = entity.getCardId();
        if (cardId != null) {
            stmt.bindLong(10, cardId);
        }
    }

    @Override
    protected void attachEntity(BaseUser entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BaseUser readEntity(Cursor cursor, int offset) {
        BaseUser entity = new BaseUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sex
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // headUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nickName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userType
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isVip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rechargeTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // cardId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BaseUser entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setHeadUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNickName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsVip(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setRechargeTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCardId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(BaseUser entity, long rowId) {
        return entity.getUid();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(BaseUser entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getIDCardDao().getAllColumns());
            builder.append(" FROM BASE_USER T");
            builder.append(" LEFT JOIN IDCARD T0 ON T.\"CARD_ID\"=T0.\"CARD_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BaseUser loadCurrentDeep(Cursor cursor, boolean lock) {
        BaseUser entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        IDCard iDCard = loadCurrentOther(daoSession.getIDCardDao(), cursor, offset);
        entity.setIDCard(iDCard);

        return entity;    
    }

    public BaseUser loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BaseUser> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BaseUser> list = new ArrayList<BaseUser>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BaseUser> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BaseUser> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
