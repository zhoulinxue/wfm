package com.zx.wfm.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.zx.wfm.bean.Televisionbean;

import com.zx.wfm.bean.Moviebean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIEBEAN".
*/
public class MoviebeanDao extends AbstractDao<Moviebean, String> {

    public static final String TABLENAME = "MOVIEBEAN";

    /**
     * Properties of entity Moviebean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", false, "OBJECT_ID");
        public final static Property MovieId = new Property(1, String.class, "movieId", true, "MOVIE_ID");
        public final static Property ItemUrl = new Property(2, String.class, "itemUrl", false, "ITEM_URL");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property VideoName = new Property(4, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property VideoHeadUrl = new Property(5, String.class, "videoHeadUrl", false, "VIDEO_HEAD_URL");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
        public final static Property MovieDetail = new Property(7, String.class, "movieDetail", false, "MOVIE_DETAIL");
        public final static Property TelevisionId = new Property(8, String.class, "TelevisionId", false, "TELEVISION_ID");
    };

    private DaoSession daoSession;

    private Query<Moviebean> televisionbean_MoviebeansQuery;

    public MoviebeanDao(DaoConfig config) {
        super(config);
    }
    
    public MoviebeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIEBEAN\" (" + //
                "\"OBJECT_ID\" TEXT," + // 0: objectId
                "\"MOVIE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: movieId
                "\"ITEM_URL\" TEXT," + // 2: itemUrl
                "\"DESC\" TEXT," + // 3: desc
                "\"VIDEO_NAME\" TEXT," + // 4: videoName
                "\"VIDEO_HEAD_URL\" TEXT," + // 5: videoHeadUrl
                "\"TIME\" INTEGER," + // 6: time
                "\"MOVIE_DETAIL\" TEXT," + // 7: movieDetail
                "\"TELEVISION_ID\" TEXT);"); // 8: TelevisionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIEBEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Moviebean entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String movieId = entity.getMovieId();
        if (movieId != null) {
            stmt.bindString(2, movieId);
        }
 
        String itemUrl = entity.getItemUrl();
        if (itemUrl != null) {
            stmt.bindString(3, itemUrl);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(5, videoName);
        }
 
        String videoHeadUrl = entity.getVideoHeadUrl();
        if (videoHeadUrl != null) {
            stmt.bindString(6, videoHeadUrl);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
 
        String movieDetail = entity.getMovieDetail();
        if (movieDetail != null) {
            stmt.bindString(8, movieDetail);
        }
 
        String TelevisionId = entity.getTelevisionId();
        if (TelevisionId != null) {
            stmt.bindString(9, TelevisionId);
        }
    }

    @Override
    protected void attachEntity(Moviebean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public Moviebean readEntity(Cursor cursor, int offset) {
        Moviebean entity = new Moviebean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // movieId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // itemUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoHeadUrl
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // movieDetail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // TelevisionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Moviebean entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMovieId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoHeadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMovieDetail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTelevisionId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Moviebean entity, long rowId) {
        return entity.getMovieId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Moviebean entity) {
        if(entity != null) {
            return entity.getMovieId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "moviebeans" to-many relationship of Televisionbean. */
    public List<Moviebean> _queryTelevisionbean_Moviebeans(String TelevisionId) {
        synchronized (this) {
            if (televisionbean_MoviebeansQuery == null) {
                QueryBuilder<Moviebean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TelevisionId.eq(null));
                televisionbean_MoviebeansQuery = queryBuilder.build();
            }
        }
        Query<Moviebean> query = televisionbean_MoviebeansQuery.forCurrentThread();
        query.setParameter(0, TelevisionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTelevisionbeanDao().getAllColumns());
            builder.append(" FROM MOVIEBEAN T");
            builder.append(" LEFT JOIN TELEVISIONBEAN T0 ON T.\"TELEVISION_ID\"=T0.\"TELEVISION_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Moviebean loadCurrentDeep(Cursor cursor, boolean lock) {
        Moviebean entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Televisionbean televisionbean = loadCurrentOther(daoSession.getTelevisionbeanDao(), cursor, offset);
        entity.setTelevisionbean(televisionbean);

        return entity;    
    }

    public Moviebean loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Moviebean> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Moviebean> list = new ArrayList<Moviebean>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Moviebean> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Moviebean> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
